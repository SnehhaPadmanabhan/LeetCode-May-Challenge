/* Problem : Maximum element
Approaches : 1. Nested loop : TC O(n^2) and SC O(1)
             2. Hash map : TC O(n) and SC O(n)
             3. Sorting : TC O(n log n) and SC : O(1)
*/
//Code :
//Hash map approach : 
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        map<int,int>counter;
        int max_count = INT_MIN, max_element = INT_MIN;
        for(int i=0;i<nums.size();i++)
            if(counter.find(nums[i])==counter.end())
            { counter.insert(pair(nums[i], 1));
              if(counter[nums[i]]>=max_count)
              {
                  max_count = counter[nums[i]];
                  max_element = nums[i];
              }
            }
            else
            { counter[nums[i]]+=1;if(counter[nums[i]]>=max_count)
              {
                  max_count = counter[nums[i]];
                  max_element = nums[i];
              }
            }
        return max_element;
    }
};


//Sorting approach
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int x = nums.size()/2;
        for(int i=0;i<nums.size()-x;i++)
            if(nums[i]==nums[i+x])
                return nums[i];
        return -1;
    }
};
