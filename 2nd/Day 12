//Problem : Single element in sorted array
//Approach : Binary search
//TC : (log n) and Sc : O(1)
//Code : 
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int first = 0, last= nums.size()-1;
        int mid;
        if(nums.size()==1)
            return nums[0];
        if(nums[0]!=nums[1])
            return nums[0];
        if(nums[nums.size()-1]!=nums[nums.size()-2])
            return nums[nums.size()-1];
        while(first<=last)
        {
            mid = (last - first)/2 + first;
                if((mid!=nums.size()-1)&&(nums[mid]==nums[mid+1]))
                {  if(mid%2==0)
                        first = mid+2;
                    else
                        last = mid-1;
                }
                else if((mid>=1)&&(nums[mid]==nums[mid-1]))
                {
                    if(mid%2)
                        first = mid+1;
                    else
                        last = mid-2;
                }
                else if((mid>=1)&&(mid!=(nums.size()-1))&&(nums[mid]!=nums[mid-1])&&(nums[mid]!=nums[mid+1]))
                    break;
        }
        return nums[mid];
    }
};
